# Context Memory Store - Docker Compose Configuration
# 
# ⚠️  PROOF OF CONCEPT SECURITY NOTICE ⚠️
# 
# This configuration is INTENTIONALLY designed for local development and research only.
# The following security decisions are DELIBERATE for ease of development:
#
# 🔓 INTENTIONAL SECURITY CHOICES (DO NOT CHANGE):
# - Authentication DISABLED on all services (NEO4J_AUTH=none, Grafana anonymous access)
# - APOC procedures UNRESTRICTED (apoc.* allowed) for full graph functionality testing
# - Plugin download WITHOUT checksum verification for simplicity
# - Default credentials where required for rapid prototyping
# - No network segmentation or access controls
# - Permissive container configurations
#
# 🚫 NOT SUITABLE FOR PRODUCTION - these choices create significant security risks:
# - Unauthorized database access, data exposure, privilege escalation
# - File system access and OS command execution through APOC
# - Supply chain attack susceptibility 
# - Container escape potential
#
# This is a RESEARCH TOOL for local AI coding agent development.
# All services assumed to run in isolated local environment only.

services:
  # Vector Database - Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: context-memory-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant.yaml:/qdrant/config/config.yaml
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "timeout", "3", "bash", "-c", "echo > /dev/tcp/localhost/6333"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - context-memory-network

  # APOC Plugin Downloader
  # SECURITY NOTE: Downloads plugin without checksum verification - intentional for POC simplicity
  neo4j-apoc-downloader:
    image: alpine:latest
    container_name: context-memory-neo4j-apoc-downloader
    volumes:
      - neo4j_plugins:/plugins
    command: |
      sh -c '
        apk add --no-cache curl
        if [ ! -f /plugins/apoc-5.15.0-core.jar ]; then
          echo "Downloading APOC plugin..."
          # NOTE: No checksum verification - acceptable for local POC development
          curl -L -o /tmp/apoc-5.15.0-core.jar https://github.com/neo4j/apoc/releases/download/5.15.0/apoc-5.15.0-core.jar
          cp /tmp/apoc-5.15.0-core.jar /plugins/apoc-5.15.0-core.jar
          chmod 644 /plugins/apoc-5.15.0-core.jar
          echo "APOC plugin downloaded successfully"
        else
          echo "APOC plugin already exists"
        fi
      '
    networks:
      - context-memory-network

  # Graph Database - Neo4j
  neo4j:
    image: neo4j:5.15-community
    container_name: context-memory-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
      - "2004:2004"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    environment:
      # SECURITY DECISIONS FOR POC (INTENTIONAL - DO NOT CHANGE):
      - NEO4J_AUTH=none  # Authentication disabled for development ease
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      # Memory Configuration (parameterized for deployment flexibility)
      - NEO4J_server_memory_heap_initial__size=${NEO4J_INITIAL_HEAP_SIZE:-512m}
      - NEO4J_server_memory_heap_max__size=${NEO4J_MAX_HEAP_SIZE:-1g}
      - NEO4J_server_memory_pagecache_size=${NEO4J_PAGE_CACHE_SIZE:-512m}
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - neo4j-apoc-downloader
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    networks:
      - context-memory-network


  # Note: Ollama is expected to be running externally on the host machine
  # The services will connect to Ollama via host.docker.internal:11434

  # Metrics Collection - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: context-memory-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - context-memory-network

  # Monitoring Dashboard - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: context-memory-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      # SECURITY DECISIONS FOR POC (INTENTIONAL - DO NOT CHANGE):
      - GF_AUTH_ANONYMOUS_ENABLED=true  # Anonymous access for development ease
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin  # Full admin access without authentication
      # GF_SECURITY_ADMIN_PASSWORD disabled for local development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    depends_on:
      - prometheus
    networks:
      - context-memory-network

  # Context Memory Store API
  context-api:
    build: 
      context: ./src
      dockerfile: ContextMemoryStore.Api/Dockerfile
    container_name: context-memory-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./project:/app/project
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8080
    depends_on:
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - context-memory-network

volumes:
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  context-memory-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16