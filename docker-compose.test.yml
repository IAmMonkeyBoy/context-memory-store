# Comprehensive Test Configuration for Context Memory Store
# Used for running infrastructure validation and connectivity tests
# WARNING: PROOF OF CONCEPT ONLY - NOT FOR PRODUCTION USE

services:
  # Main test orchestrator
  test-runner:
    image: curlimages/curl:latest
    container_name: context-memory-test-runner
    depends_on:
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
    networks:
      - context-memory-network
    command: |
      sh -c '
        echo "üß™ Starting comprehensive infrastructure tests..."
        echo "================================================"
        echo ""
        
        # Function to test endpoint with retries
        test_endpoint() {
          local url=$$1
          local name=$$2
          local retries=3
          local delay=5
          
          for i in $$(seq 1 $$retries); do
            if curl -s --max-time 10 -f "$$url" > /dev/null; then
              echo "‚úÖ $$name is accessible"
              return 0
            fi
            if [ $$i -lt $$retries ]; then
              echo "‚ö†Ô∏è  $$name not ready, retrying in $${delay}s... ($$i/$$retries)"
              sleep $$delay
            fi
          done
          echo "‚ùå $$name failed after $$retries attempts"
          return 1
        }
        
        # Test service health endpoints
        echo "üîç Testing service health endpoints..."
        test_endpoint "http://qdrant:6333/health" "Qdrant health" || exit 1
        test_endpoint "http://neo4j:7474/" "Neo4j web interface" || exit 1
        test_endpoint "http://prometheus:9090/-/healthy" "Prometheus health" || exit 1
        test_endpoint "http://grafana:3000/api/health" "Grafana health" || exit 1
        echo ""
        
        # Test metrics endpoints
        echo "üìä Testing metrics endpoints..."
        test_endpoint "http://qdrant:6333/metrics" "Qdrant metrics" || exit 1
        test_endpoint "http://neo4j:2004/metrics" "Neo4j metrics" || exit 1
        test_endpoint "http://prometheus:9090/metrics" "Prometheus metrics" || exit 1
        test_endpoint "http://grafana:3000/metrics" "Grafana metrics" || exit 1
        echo ""
        
        # Test Ollama external connectivity
        echo "ü§ñ Testing external Ollama connectivity..."
        if curl -s --max-time 10 -f "http://host.docker.internal:11434/api/version" > /dev/null; then
          echo "‚úÖ Ollama external service is accessible"
          
          # Test Ollama API endpoints
          if curl -s --max-time 10 -f "http://host.docker.internal:11434/api/tags" > /dev/null; then
            echo "‚úÖ Ollama API endpoints responding"
          else
            echo "‚ö†Ô∏è  Ollama API endpoints not fully responsive"
          fi
        else
          echo "‚ö†Ô∏è  Ollama external service not accessible (this is optional for infrastructure testing)"
        fi
        echo ""
        
        # Test Qdrant functionality
        echo "üîç Testing Qdrant basic functionality..."
        # Create a test collection
        curl -s -X PUT "http://qdrant:6333/collections/test-collection" \
          -H "Content-Type: application/json" \
          -d "{\"vectors\": {\"size\": 4, \"distance\": \"Cosine\"}}" > /dev/null
        
        if [ $$? -eq 0 ]; then
          echo "‚úÖ Qdrant collection creation successful"
          
          # List collections to verify
          if curl -s "http://qdrant:6333/collections" | grep -q "test-collection"; then
            echo "‚úÖ Qdrant collection listing working"
          else
            echo "‚ö†Ô∏è  Qdrant collection not found in listing"
          fi
        else
          echo "‚ùå Qdrant collection creation failed"
          exit 1
        fi
        echo ""
        
        # Test Neo4j functionality  
        echo "üîó Testing Neo4j basic functionality..."
        # Test basic connectivity with authentication
        NEO4J_USER="neo4j"
        NEO4J_PASS="contextmemory"
        
        # Test Neo4j authentication and basic query
        if curl -s --max-time 10 -u "$$NEO4J_USER:$$NEO4J_PASS" \
          -H "Content-Type: application/json" \
          -X POST "http://neo4j:7474/db/data/transaction/commit" \
          -d "{\"statements\":[{\"statement\":\"RETURN 1 as test\"}]}" | grep -q "test"; then
          echo "‚úÖ Neo4j authentication and basic queries working"
        else
          echo "‚ùå Neo4j authentication or query execution failed"
          exit 1
        fi
        echo ""
        
        # Test Prometheus targets
        echo "üìà Testing Prometheus configuration..."
        if curl -s "http://prometheus:9090/api/v1/targets" | grep -q "neo4j\|qdrant\|grafana"; then
          echo "‚úÖ Prometheus has configured targets"
        else
          echo "‚ö†Ô∏è  Prometheus targets may not be fully configured"
        fi
        echo ""
        
        # Test Grafana data source connectivity
        echo "üìä Testing Grafana functionality..."
        GRAFANA_USER="admin"
        GRAFANA_PASS="contextmemory"
        
        if curl -s --max-time 10 -u "$$GRAFANA_USER:$$GRAFANA_PASS" \
          "http://grafana:3000/api/datasources" | grep -q "prometheus"; then
          echo "‚úÖ Grafana can access data sources"
        else
          echo "‚ö†Ô∏è  Grafana data source configuration may need attention"
        fi
        echo ""
        
        echo "üéâ All infrastructure tests completed successfully!"
        echo "================================================"
        exit 0
      '
    
  # Neo4j connectivity validator
  neo4j-validator:
    image: curlimages/curl:latest
    container_name: context-memory-neo4j-validator
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - context-memory-network
    profiles:
      - extended-tests
    command: |
      sh -c '
        echo "üîó Running extended Neo4j validation..."
        
        # Test APOC availability
        NEO4J_USER="neo4j"
        NEO4J_PASS="contextmemory"
        
        echo "Testing APOC procedures..."
        if curl -s -u "$$NEO4J_USER:$$NEO4J_PASS" \
          -H "Content-Type: application/json" \
          -X POST "http://neo4j:7474/db/data/transaction/commit" \
          -d "{\"statements\":[{\"statement\":\"CALL apoc.help(\\\"apoc\\\") YIELD name RETURN count(name) as apoc_procedures\"}]}" | grep -q "apoc_procedures"; then
          echo "‚úÖ APOC procedures are available"
        else
          echo "‚ùå APOC procedures not available"
          exit 1
        fi
        
        echo "Neo4j extended validation complete"
      '
      
  # Ollama connectivity validator (only runs if Ollama is available)
  ollama-validator:
    image: curlimages/curl:latest
    container_name: context-memory-ollama-validator
    networks:
      - context-memory-network
    profiles:
      - extended-tests
    command: |
      sh -c '
        echo "ü§ñ Running extended Ollama validation..."
        
        # Test if Ollama is running and responsive
        if curl -s --max-time 15 "http://host.docker.internal:11434/api/version"; then
          echo "‚úÖ Ollama version endpoint accessible"
          
          # Test model listing
          if curl -s --max-time 15 "http://host.docker.internal:11434/api/tags" | grep -q "models"; then
            echo "‚úÖ Ollama model listing working"
          else
            echo "‚ö†Ô∏è  No models found in Ollama"
          fi
        else
          echo "‚ö†Ô∏è  Ollama service not accessible - skipping extended tests"
        fi
        
        echo "Ollama extended validation complete"
      '

  # Include all services from main docker-compose
  qdrant:
    extends:
      file: docker-compose.yml
      service: qdrant

  neo4j:
    extends:
      file: docker-compose.yml
      service: neo4j

  prometheus:
    extends:
      file: docker-compose.yml
      service: prometheus

  grafana:
    extends:
      file: docker-compose.yml
      service: grafana

networks:
  context-memory-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prometheus_data:
  grafana_data: